---
import Container from "./Container.astro";

let eventObject = [
    { startTime: "9:00AM", endTime: "11:00AM", Core: "Check-in", Event: "Team Matching Begins, Career Fair" },
    { startTime: "10:30AM", endTime: "11:00AM", Core: "Walk-in Registration", Event: "Career Fair" },
    { startTime: "11:00AM", endTime: "12:00PM", Core: "Opening Ceremony", Event: "Career Fair" },
    { startTime: "12:00PM", endTime: "1:00PM", Core: "Lunch & Hacking Begins", Event: "" },
    { startTime: "12:30PM", endTime: "1:15PM", Core: "", Event: "Welcome Workshop: Intro to Hackathon w/ Notion" },
    { startTime: "1:30PM", endTime: "2:00PM", Core: "", Event: "Development and Code Sharing w/ GitHub" },
    { startTime: "2:00PM", endTime: "2:30PM", Core: "", Event: "MLH: Github Copilot" },
    { startTime: "3:00PM", endTime: "3:45PM", Core: "", Event: "Website Workshop w/ GWC" },
    { startTime: "4:00PM", endTime: "4:45PM", Core: "", Event: "" },
    { startTime: "4:00PM", endTime: "5:30PM", Core: "", Event: "React Workshop w/ WebDevUW" },
    { startTime: "6:00PM", endTime: "6:30PM", Core: "Dinner", Event: "" },
    { startTime: "7:00PM", endTime: "8:00PM", Core: "", Event: "CAT Digital Code in the Dark Challenge" },
    { startTime: "8:00PM", endTime: "9:00PM", Core: "", Event: "Transcend: How to Present" },
    { startTime: "9:00PM", endTime: "10:00PM", Core: "", Event: "Mini Event MLH - Bob Ross" },
    { startTime: "10:00PM", endTime: "12:00AM", Core: "", Event: "" },
    { startTime: "12:00AM", endTime: "1:00AM", Core: "", Event: "Estimathon" },
    { startTime: "1:00AM", endTime: "8:00AM", Core: "Overnight Hacking", Event: "" },
    { startTime: "8:00AM", endTime: "12:00PM", Core: "Breakfast & Final Sprint", Event: "" },
    { startTime: "12:00PM", endTime: "1:00PM", Core: "Hacking Ends, Lunch Begins", Event: "" },
    { startTime: "1:00PM", endTime: "2:00PM", Core: "Project Judging", Event: "" },
    { startTime: "2:30PM", endTime: "3:00PM", Core: "Finalist Presentations", Event: "" },
    { startTime: "3:15PM", endTime: "4:00PM", Core: "Awards & Closing Ceremony", Event: "" }
];

const EVENT_START = new Date('2024-11-09T00:00:00-06:00'); // CST is UTC-6
const EVENT_END = new Date('2024-11-10T23:59:59-06:00');

// Convert a time string to a Date object in CST
function getTime(timeStr, isNextDay = false) {
    const [time, modifier] = timeStr.split(/(?=AM|PM)/);
    let [hours, minutes] = time.split(":");
    hours = parseInt(hours);
    minutes = parseInt(minutes);

    if (modifier === "PM" && hours !== 12) hours += 12;
    if (modifier === "AM" && hours === 12) hours = 0;

    // Create date string in CST
    const baseDate = isNextDay ? '2024-11-10' : '2024-11-09';
    const timeString = `${baseDate}T${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:00-06:00`;

    return new Date(timeString);
}

function isCurrentEvent(startTime, endTime) {
    // Get current time in CST
    const now = new Date();
    // Convert to CST string
    const cstString = now.toLocaleString("en-US", {
        timeZone: "America/Chicago",
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
    });
    const cstNow = new Date(cstString);

    // Check if we're within the event period
    if (cstNow < EVENT_START || cstNow > EVENT_END) {
        return false;
    }

    // Determine if this is a next-day event
    const isSecondDay = cstNow.getDate() === EVENT_END.getDate();

    let start = getTime(startTime, isSecondDay);
    let end = getTime(endTime, isSecondDay);

    // Handle overnight events
    if (end < start) {
        if (cstNow >= start) {
            end = new Date(end.getTime() + 24 * 60 * 60 * 1000); // Add 24 hours
        } else if (cstNow <= end) {
            start = new Date(start.getTime() - 24 * 60 * 60 * 1000); // Subtract 24 hours
        }
    }

    return cstNow >= start && cstNow <= end;
}
---
<div class="w-full mx-auto px-6 md:px-12 xl:px-6 bg-gray-800">
    <div class="relative pb-10 pt-10 sm:pt-10 sm:pb-10 ml-auto min-h-full flex flex-col items-center">
        <h1 id="schedule" class="font-header text-white font-semibold text-3xl md:text-4xl xl:text-5xl mt-12 mb-4">Schedule</h1>
        <div class="w-lg max-w-full overflow-x-auto">
            <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400 overflow-x-auto">
                <thead class="text-base uppercase bg-gray-700 text-gray-100">
                    <tr>
                        <th scope="col" class="px-6 py-3">Time</th>
                        <th scope="col" class="px-6 py-3">Core</th>
                        <th scope="col" class="px-6 py-3">Event</th>
                    </tr>
                </thead>
                <tbody>
                    {eventObject.map((element) => (
                        <tr class={`transition-colors duration-200 ${
                            isCurrentEvent(element.startTime, element.endTime)
                                ? "bg-cyan-600"
                                : "bg-gray-800"
                        }`}>
                            <td class="px-6 py-4 font-medium text-lg whitespace-nowrap text-white">
                                {element.startTime} - {element.endTime}
                            </td>
                            <td class="px-6 py-4 font-medium text-lg whitespace-nowrap text-white">
                                {element.Core}
                            </td>
                            <td class="px-6 py-4 font-medium text-lg whitespace-nowrap text-white">
                                {element.Event}
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    </div>
</div>
